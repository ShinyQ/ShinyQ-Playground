---
import Layout from "@/layouts/Layout.astro";
import { projects } from "@/data/projects";
import type { Project as ProjectType } from "@/data/projects";
import ProjectGrid from "@/components/project/ProjectGrid";
import { metadata } from "@/data/metadata";
import { getSignedFileUrl, listDirectoryFiles } from "@/lib/r2";
import type { R2File } from "@/lib/r2";
import { tagCategories } from "@/data/tagCategories";

interface GalleryImage {
  src: string;
  alt: string;
}

interface EnhancedProject extends Omit<ProjectType, "gallery"> {
  gallery: GalleryImage[];
}

const enhancedProjects = await Promise.all(
  projects.map(async (project): Promise<EnhancedProject> => {
    const signedCoverImage = await getSignedFileUrl(project.coverImage);
    const galleryImages: GalleryImage[] = [];

    if (project.gallery) {
      if (typeof project.gallery === "string") {
        const directoryPath = project.gallery.endsWith("/") 
          ? project.gallery 
          : `${project.gallery}/`;
        
        const files: R2File[] = await listDirectoryFiles(directoryPath);
        
        const validFiles = files.filter(file => {
          const relativePath = file.key.substring(directoryPath.length);
          return !relativePath.includes("/");
        });
        
        const imagePromises = validFiles.map(
          async (file, idx): Promise<GalleryImage> => ({
            src: await getSignedFileUrl(file.key),
            alt: `${project.title} ${idx + 1}`,
          })
        );

        const images = await Promise.all(imagePromises);
        galleryImages.push(...images);
      }
    }

    if (galleryImages.length === 0) {
      galleryImages.push({
        src: signedCoverImage,
        alt: project.title,
      });
    }

    return {
      ...project,
      coverImage: signedCoverImage,
      gallery: galleryImages,
    };
  })
);
---

<Layout
  title={metadata.projects.title}
  description={metadata.projects.description}
>
  {
    enhancedProjects.map((project) => (
      <link 
        rel="preload" 
        href={project.coverImage} 
        as="image" 
        fetchpriority="high"
      />
    ))
  }

  <div class="container mx-auto px-4 py-16 md:py-24">
    <div class="mb-12">
      <div class="text-sm text-primary font-mono mb-2">
        { "// featured projects" }
      </div>
      <h1 class="text-3xl md:text-4xl font-bold mb-6">My Projects</h1>
      <p class="text-lg text-foreground/80 max-w-3xl">
        A collection of projects I've built and contributed to. These range from
        personal explorations to professional work across various domains.
      </p>
    </div>

    <div class="mb-12">      
      <div class="flex flex-wrap gap-2 mb-3" id="category-filter">
        <button
          data-category="all"
          class="category-button px-4 py-1.5 rounded-full text-sm font-medium transition-all bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm"
        >
          All
        </button>
        {
          tagCategories.map((category) => (
            <button
              data-category={category.id}
              class="category-button px-4 py-1.5 rounded-full text-sm font-medium transition-all bg-muted text-foreground/70 hover:bg-muted/80 hover:text-foreground"
            >
              {category.name}
            </button>
          ))
        }
      </div>

      <div class="flex items-center gap-2 text-sm text-muted-foreground">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info"><circle cx="12" cy="12" r="10"/><path d="M12 16v-4"/><path d="M12 8h.01"/></svg>
        <span>Click category to filter projects â€¢ Click 'View More' for full descriptions, galleries, tech stacks, and more!</span>
      </div>
    </div>

    <ProjectGrid client:visible projects={enhancedProjects} />

    <div class="text-center py-20 hidden" id="no-projects">
      <h3 class="text-xl mb-2">No projects found</h3>
      <p class="text-foreground/70">
        No projects match the selected filter. Try selecting a different
        category.
      </p>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const categoryFilter = document.getElementById('category-filter');
    if (!categoryFilter) return;

    const buttons = categoryFilter.querySelectorAll('.category-button');

    const activeClasses = ['bg-primary', 'text-primary-foreground', 'hover:bg-primary/90', 'shadow-sm'];
    const inactiveClasses = ['bg-muted', 'text-foreground/70', 'hover:bg-muted/80', 'hover:text-foreground'];

    // Set initial state for "All" button if needed, though it's already set by default in markup.
    // The "All" button has active classes by default.

    buttons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active styles from all buttons
        buttons.forEach(btn => {
          btn.classList.remove(...activeClasses);
          btn.classList.add(...inactiveClasses);
        });

        // Add active styles to the clicked button
        button.classList.remove(...inactiveClasses);
        button.classList.add(...activeClasses);

        // The ProjectGrid component will pick up this click via its own document event listener
        // and update its internal state for filtering.
      });
    });
  });
</script>
