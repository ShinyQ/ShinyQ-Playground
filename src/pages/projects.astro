---
import Layout from "@/layouts/Layout.astro";
import { projects } from "@/data/projects";
import type { Project as ProjectType } from "@/data/projects";
import ProjectGrid from "@/components/project/ProjectGrid";
import { metadata } from "@/data/metadata";
import { getSignedFileUrl, listDirectoryFiles } from "@/lib/r2";
import type { R2File } from "@/lib/r2";

interface GalleryImage {
  src: string;
  alt: string;
}

interface EnhancedProject extends Omit<ProjectType, "gallery"> {
  gallery: GalleryImage[];
}

const enhancedProjects = await Promise.all(
  projects.map(async (project): Promise<EnhancedProject> => {
    const signedCoverImage = await getSignedFileUrl(project.coverImage);
    const galleryImages: GalleryImage[] = [];

    if (project.gallery) {
      if (typeof project.gallery === "string") {
        const directoryPath = project.gallery.endsWith("/") 
          ? project.gallery 
          : `${project.gallery}/`;
        
        const files: R2File[] = await listDirectoryFiles(directoryPath);
        
        const validFiles = files.filter(file => {
          const relativePath = file.key.substring(directoryPath.length);
          return !relativePath.includes("/");
        });
        
        const imagePromises = validFiles.map(
          async (file, idx): Promise<GalleryImage> => ({
            src: await getSignedFileUrl(file.key),
            alt: `${project.title} ${idx + 1}`,
          })
        );

        const images = await Promise.all(imagePromises);
        galleryImages.push(...images);
      }
    }

    if (galleryImages.length === 0) {
      galleryImages.push({
        src: signedCoverImage,
        alt: project.title,
      });
    }

    return {
      ...project,
      coverImage: signedCoverImage,
      gallery: galleryImages,
    };
  })
);

const allGalleryImages = enhancedProjects.flatMap((project) =>
  project.gallery
    .filter((img, idx) =>
      idx === 0 && img.src === project.coverImage ? false : true
    )
    .map((img) => img.src)
);
---

<Layout
  title={metadata.projects.title}
  description={metadata.projects.description}
>
  {
    allGalleryImages.map((imageSrc) => (
      <link rel="prefetch" href={imageSrc} as="image" />
    ))
  }

  <div class="container mx-auto px-4 py-16 md:py-24">
    <div class="mb-12">
      <div class="text-sm text-primary font-mono mb-2">
        // featured projects
      </div>
      <h1 class="text-3xl md:text-4xl font-bold mb-6">My Projects</h1>
      <p class="text-lg text-foreground/80 max-w-3xl">
        A collection of projects I've built and contributed to. These range from
        personal explorations to professional work across various domains.
      </p>
    </div>

    <!-- Tags filter -->
    <div class="mb-8 flex flex-wrap gap-2" id="tag-filter">
      <button
        data-tag="all"
        class="px-3 py-1 rounded-full text-sm transition-colors bg-primary text-primary-foreground"
      >
        All
      </button>
      {
        Array.from(new Set(projects.flatMap((project) => project.tags))).map(
          (tag) => (
            <button
              data-tag={tag}
              class="px-3 py-1 rounded-full text-sm transition-colors bg-muted text-foreground/70 hover:bg-muted/80"
            >
              {tag}
            </button>
          )
        )
      }
    </div>

    <!-- Projects grid -->
    <div
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
      id="projects-grid"
    >
      <ProjectGrid client:only="react" projects={enhancedProjects} />
    </div>

    <div class="text-center py-20 hidden" id="no-projects">
      <h3 class="text-xl mb-2">No projects found</h3>
      <p class="text-foreground/70">
        No projects match the selected filter. Try selecting a different
        category.
      </p>
    </div>
  </div>
</Layout>
