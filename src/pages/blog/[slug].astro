---
import Layout from "@/layouts/Layout.astro";
import { blogPosts } from "@/data/blog";
import { ArrowLeft, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { formatDate } from "@/lib/utils";

export async function getStaticPaths() {
  return blogPosts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

const { slug } = Astro.params;
const post = blogPosts.find(p => p.slug === slug);

if (!post) {
  return Astro.redirect('/404');
}

const relatedPosts = blogPosts
  .filter(p => 
    p.slug !== post.slug && 
    p.tags.some(tag => post.tags.includes(tag))
  )
  .slice(0, 3);

const finalRelatedPosts = relatedPosts.length 
  ? relatedPosts 
  : blogPosts.filter(p => p.slug !== post.slug).slice(0, 3);
---

<Layout title={post.title} description={post.excerpt}>
  <div class="w-full bg-muted">
    <div class="container mx-auto px-4 py-12 md:py-20">
      <div class="flex flex-wrap gap-2 mb-4">
        {post.tags.map((tag) => (
          <span 
            class="text-xs px-2 py-1 rounded-full bg-primary/20 text-primary"
          >
            {tag}
          </span>
        ))}
      </div>
      <h1 class="text-3xl md:text-5xl font-bold mb-4">
        {post.title}
      </h1>
      <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/70">
        <div>
          {formatDate(post.date)}
        </div>
        {post.readingTime && (
          <div class="flex items-center gap-1">
            <Clock size={14} />
            <span>{post.readingTime} read</span>
          </div>
        )}
      </div>
    </div>
  </div>
  
  <div class="container mx-auto px-4 py-10">
    <div class="max-w-4xl mx-auto">
      <div class="mb-10 rounded-lg overflow-hidden">
        <img 
          src={post.coverImage} 
          alt={post.title} 
          class="w-full h-auto"
        />
      </div>
      
      <div class="prose prose-invert prose-lg max-w-none">
        <Fragment set:html={post.content.replace(/\n/g, '<br />')} />
      </div>
      
      <div class="mt-12 pt-8 border-t border-border">
        <Button variant="outline" asChild>
          <a href="/blog" class="flex items-center">
            <ArrowLeft size={16} className="mr-2" />
            Back to Blog
          </a>
        </Button>
      </div>
      
      <!-- Related posts -->
      <div class="mt-16">
        <h3 class="text-xl font-bold mb-6">Related Posts</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {finalRelatedPosts.map(related => (
            <a href={`/blog/${related.slug}`}>
              <div class="bg-card rounded-lg overflow-hidden border border-border 
                hover:border-primary transition-all duration-300">
                <div class="h-40 overflow-hidden">
                  <img 
                    src={related.coverImage} 
                    alt={related.title} 
                    class="w-full h-full object-cover" 
                  />
                </div>
                <div class="p-4">
                  <h4 class="font-semibold mb-2 line-clamp-2">{related.title}</h4>
                  <div class="text-xs text-foreground/60">
                    {formatDate(related.date)}
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .prose {
    @apply text-foreground;
  }
  .prose a {
    @apply text-primary hover:text-primary/80;
  }
  .prose h1, .prose h2, .prose h3, .prose h4 {
    @apply text-foreground;
  }
  .prose p {
    @apply text-foreground/80;
  }
  .prose code {
    @apply bg-muted px-1 py-0.5 rounded text-sm;
  }
  .prose pre {
    @apply bg-muted p-4 rounded-lg;
  }
  .prose blockquote {
    @apply border-l-4 border-primary/50 pl-4 italic;
  }
</style> 