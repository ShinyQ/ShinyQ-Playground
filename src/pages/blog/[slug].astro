---
export const prerender = true;

import Layout from "@/layouts/Layout.astro";
import BlogPost from "@/layouts/BlogPost.astro";
import { ArrowLeft, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { formatDate } from "@/lib/utils";
import { getSignedFileUrl } from "@/lib/r2";
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

if (!post.data) {
  return Astro.redirect('/404');
}

const presignedCoverImage = post.data.coverImage ? await getSignedFileUrl(post.data.coverImage) : '';
const postData = {
  ...post.data,
  coverImage: presignedCoverImage,
};

const allPosts = await getCollection('blog');
const otherPosts = allPosts.filter(p => p.slug !== post.slug);

interface ProcessedPost {
  slug: string;
  presignedCoverImage: string;
  title: string;
  date: string;
  readingTime?: string;
  tags: string[];
}

const allPostsWithImages = await Promise.all(
  otherPosts.map(async (p): Promise<ProcessedPost> => ({
    slug: p.slug,
    presignedCoverImage: p.data.coverImage ? await getSignedFileUrl(p.data.coverImage) : '',
    title: p.data.title,
    date: p.data.date,
    readingTime: p.data.readingTime,
    tags: p.data.tags,
  }))
);

const relatedPosts = allPostsWithImages
  .filter((p) => p.tags.some((tag) => postData.tags.includes(tag)))
  .slice(0, 3);

const finalRelatedPosts = relatedPosts.length
  ? relatedPosts
  : allPostsWithImages.slice(0, 3);
---

<Layout 
  title={postData.title} 
  description={postData.excerpt}
  image={presignedCoverImage}
>
  <div class="w-full bg-muted mb-12">
    <div class="container mx-auto px-4 py-12 md:py-20">
      <div class="flex flex-wrap gap-2 mb-6">
        {postData.tags?.map((tag) => (
          <span class="text-xs px-3 py-1.5 rounded-full bg-primary/10 text-primary border border-primary/20 font-medium">
            {tag}
          </span>
        ))}
      </div>

      <h1 class="text-3xl md:text-5xl font-bold mb-6">
        {postData.title}
      </h1>

      <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/70">
        <div class="flex items-center gap-2">
          {formatDate(postData.date)}
        </div>
        {postData.readingTime && (
          <div class="flex items-center gap-2">
            <Clock size={14} />
            <span>{postData.readingTime} read</span>
          </div>
        )}
        {postData.category && (
          <div class="flex items-center gap-2">
            <span>•</span>
            <span>{postData.category}</span>
          </div>
        )}
      </div>
    </div>
  </div>

  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto">
      <BlogPost frontmatter={postData}>
        <Content />
      </BlogPost>

      <div class="mt-16 pt-8 border-t border-border/50">
        <Button variant="outline" asChild>
          <a href="/blog" class="flex items-center group">
            <ArrowLeft size={16} className="mr-2 group-hover:-translate-x-1 transition-transform" />
            Back to Blog
          </a>
        </Button>
      </div>

      {finalRelatedPosts.length > 0 && (
        <div class="mt-16 pt-16 border-t border-border/50">
          <h3 class="text-2xl font-bold mb-8 bg-gradient-to-br from-white to-foreground/70 bg-clip-text text-transparent">
            Related Posts
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {finalRelatedPosts.map((related) => (
              <a href={`/blog/${related.slug}`} class="group h-full">
                <div class="bg-card rounded-xl overflow-hidden border border-border/50 
                  hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/5 h-full flex flex-col">
                  <div class="aspect-video overflow-hidden">
                    <img 
                      src={related.presignedCoverImage} 
                      alt={related.title} 
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700" 
                    />
                  </div>
                  <div class="p-5 flex flex-col flex-grow">
                    <h4 class="font-semibold mb-2 line-clamp-2 group-hover:text-primary transition-colors flex-grow">
                      {related.title}
                    </h4>
                    <div class="text-xs text-foreground/60 flex items-center gap-2">
                      <span>{formatDate(related.date)}</span>
                      {related.readingTime && (
                        <>
                          <span>•</span>
                          <span>{related.readingTime} read</span>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>