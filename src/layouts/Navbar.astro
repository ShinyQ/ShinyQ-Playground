---
import ThemeToggle from "../components/custom/ThemeToggle";
import { Menu } from "lucide-react";

const navItems = [
    { name: "Home", path: "/" },
    { name: "About", path: "/about" },
    { name: "Journey", path: "/journey" },
    { name: "Blog", path: "/blog" },
    { name: "Projects", path: "/projects" },
];

const currentPath = Astro.url.pathname;

function isActive(path: string) {
  if (path === "/" && currentPath === "/") return true;
  if (path !== "/" && currentPath.startsWith(path)) return true;
  return false;
}
---

<header class="fixed top-0 w-full z-50 transition-all duration-300" id="navbar">
  <div class="container mx-auto px-4">
    <div class="flex h-16 items-center justify-between">
      <div class="flex items-center">
        <a href="/" class="text-xl font-bold text-primary">
          <span class="text-primary">&gt;</span> ShinyQ<span class="text-primary">_</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-1">
        {
          navItems.map((item) => (
            <a
              href={item.path}
              class={`nav-link ${isActive(item.path) ? "active" : ""}`}
            >
              {item.name}
            </a>
          ))
        }
        <ThemeToggle client:load />
      </nav>

      <!-- Mobile Navigation Toggle -->
      <div class="flex items-center md:hidden gap-4">
        <div class="relative z-50">
          <ThemeToggle client:load />
        </div>
        <button
          id="mobile-menu-button"
          aria-label="Toggle menu"
          class="text-foreground bg-transparent border-none p-2 z-50"
          aria-expanded="false"
        >
          <Menu className="w-6 h-6" />
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation Menu -->
  <nav 
    class="md:hidden py-4 px-4 bg-background/95 backdrop-blur-md border-b border-border hidden" 
    id="mobile-menu"
    aria-hidden="true"
  >
    <ul class="space-y-2">
      {
        navItems.map((item) => (
          <li>
            <a
              href={item.path}
              class={`block py-2 px-4 rounded-md ${
                isActive(item.path)
                  ? "bg-primary/10 text-primary"
                  : "text-foreground/80 hover:text-foreground"
              }`}
              onclick="document.getElementById('mobile-menu-button').click()"
            >
              {item.name}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<style>
  .nav-link {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    border-radius: 0.375rem;
    color: var(--tw-foreground-80);
    transition-property: color;
  }
  .nav-link.active {
    color: var(--tw-primary);
    font-weight: 500;
  }
</style>

<script>
  // Handle scroll effect
  const navbar = document.getElementById('navbar');
  let isScrolled = false;

  function handleScroll() {
    const shouldBeScrolled = window.scrollY > 10;
    if (shouldBeScrolled !== isScrolled) {
      isScrolled = shouldBeScrolled;
      navbar?.classList.toggle('bg-background/90', isScrolled);
      navbar?.classList.toggle('backdrop-blur-md', isScrolled);
      navbar?.classList.toggle('border-b', isScrolled);
      navbar?.classList.toggle('border-border', isScrolled);
    }
  }

  window.addEventListener('scroll', handleScroll);
  handleScroll(); // Initial check

  // Handle mobile menu
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  let mobileMenuOpen = false;

  function toggleMobileMenu() {
    mobileMenuOpen = !mobileMenuOpen;
    mobileMenu?.classList.toggle('hidden', !mobileMenuOpen);
    navbar?.classList.toggle('bg-background/90', mobileMenuOpen);
    navbar?.classList.toggle('backdrop-blur-md', mobileMenuOpen);
    navbar?.classList.toggle('border-b', mobileMenuOpen);
    navbar?.classList.toggle('border-border', mobileMenuOpen);

    // Update ARIA attributes
    mobileMenuButton?.setAttribute('aria-expanded', mobileMenuOpen.toString());
    mobileMenu?.setAttribute('aria-hidden', (!mobileMenuOpen).toString());
  }

  if (mobileMenuButton) {
    mobileMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
  }

  // Close mobile menu when clicking outside
  document.addEventListener('click', (event) => {
    if (
      mobileMenuOpen &&
      mobileMenuButton &&
      !mobileMenuButton.contains(event.target as Node) &&
      mobileMenu &&
      !mobileMenu.contains(event.target as Node)
    ) {
      toggleMobileMenu();
    }
  });

  // Close mobile menu on window resize if screen becomes larger than mobile breakpoint
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && mobileMenuOpen) {
      toggleMobileMenu();
    }
  });

  // Close mobile menu when pressing Escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && mobileMenuOpen) {
      toggleMobileMenu();
    }
  });
</script>
